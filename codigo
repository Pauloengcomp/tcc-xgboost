!pip install dbfread pandas scikit-learn xgboost
!pip install --upgrade pysus
from pysus.online_data import SIM
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import xgboost as xgb
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.over_sampling import SMOTE

# 1. Download dos dados
arquivos = SIM.download(groups=["cid10"], states='BA', years=2023)
df = arquivos.to_dataframe()
df_model = df.copy()

# 2. Conversão da idade
df_model['IDADE'] = pd.to_numeric(df_model['IDADE'], errors='coerce')

# 3. Criação de faixa etária
def categorizar_faixa_etaria(idade):
    if idade <= 1:
        return 'Bebê'
    elif idade <= 14:
        return 'Criança'
    elif idade <= 49:
        return 'Adulto Jovem'
    elif idade <= 64:
        return 'Meia-Idade'
    else:
        return 'Idoso'

df_model['FAIXA_ETARIA'] = df_model['IDADE'].apply(categorizar_faixa_etaria)

# 4. Checar e preencher valores ausentes
print("Valores ausentes por coluna:")
print(df_model[['IDADE', 'SEXO', 'RACACOR', 'ESC', 'LOCOCOR']].isnull().sum())

if df_model['IDADE'].isnull().sum() > 0:
    df_model['IDADE'].fillna(df_model['IDADE'].median(), inplace=True)

for col in ['SEXO', 'RACACOR', 'ESC', 'LOCOCOR']:
    if df_model[col].isnull().sum() > 0:
        df_model[col].fillna(df_model[col].mode()[0], inplace=True)

# 5. Agrupamento em supergrupos clínicos
df_model['CAPITULO_CID'] = df_model['CAUSABAS'].str[0]
def supergrupo_clinico(capitulo):
    if capitulo in ['A', 'B']:
        return 'Doenças Infecciosas'
    elif capitulo in ['C', 'D']:
        return 'Neoplasias'
    elif capitulo in ['I', 'J', 'K']:
        return 'Doenças Crônicas'
    elif capitulo in ['R', 'X', 'Y']:
        return 'Causas Externas'
    else:
        return 'Outros'
df_model['GRUPO_CLINICO'] = df_model['CAPITULO_CID'].apply(supergrupo_clinico)

# 6. Variáveis preditoras e codificação
X = df_model[['FAIXA_ETARIA', 'SEXO', 'RACACOR', 'ESC', 'LOCOCOR']]
X = pd.get_dummies(X)

# 7. Variável alvo
le = LabelEncoder()
y_encoded = le.fit_transform(df_model['GRUPO_CLINICO'])

# 8. Separar treino/teste
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded
)

# 9. Conversão para float (evitar erros de cast)
X_train = X_train.astype(float)
X_test = X_test.astype(float)

# 10. Calcular peso médio para balanceamento no XGBoost
from collections import Counter
counts = Counter(y_train)
max_count = max(counts.values())
scale_pos_weight = {cls: max_count / count for cls, count in counts.items()}
media_peso = np.mean(list(scale_pos_weight.values()))

# 11. Treinamento XGBoost
dtrain = xgb.DMatrix(X_train, label=y_train)
dtest = xgb.DMatrix(X_test, label=y_test)

params = {
    'objective': 'multi:softmax',
    'num_class': len(le.classes_),
    'eval_metric': 'mlogloss',
    'max_depth': 10,
    'min_child_weight': 5,
    'eta': 0.1,
    'scale_pos_weight': media_peso,
    'seed': 42
}
num_round = 100
bst = xgb.train(params, dtrain, num_round)

# 12. Predição e avaliação
y_pred = bst.predict(dtest)

acc = accuracy_score(y_test, y_pred)
print(f"Acurácia: {acc:.2f}")
print("Relatório de Classificação:")
print(classification_report(y_test, y_pred, target_names=le.classes_))

# 13. Matriz de confusão
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.title(f'Matriz de Confusão - Acurácia: {acc:.2f}')
plt.xlabel('Classe Predita')
plt.ylabel('Classe Verdadeira')
plt.tight_layout()
plt.show()
